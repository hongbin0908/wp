

/**
 * @author abin
 */
class Chapt_6_2_001 {
  def totalResultOverRange(number: Int, codeBlock: Int => Int): Int = {
    var result = 0
    for (i <- 1 to number) {
      result += codeBlock(i)
    }
    result
  }

  def inject(arr: Array[Int], initial: Int, operation: (Int, Int) => Int): Int = {
    var carryOver = initial
    arr.foreach(element => carryOver = operation(carryOver, element))
    carryOver
  }
}

object Sample {
  def main(args: Array[String]) = {
    val instance = new Chapt_6_2_001
    println(instance.totalResultOverRange(100, i => i))
    println(instance.totalResultOverRange(100, i => if (i % 2 == 0) i else 0))
    println(instance.totalResultOverRange(100, i => if (i % 2 == 0) 1 else 0))

    val array = Array(2, 3, 1, 6, 4)
    val sum = instance.inject(array, 0, (carryOver, elem) => carryOver + elem)
    println("Sum of elements in array " + array.toString() + " is " + sum)

    val max = instance.inject(array, Integer.MIN_VALUE, 
        (carryOver, elem) => Math.max(carryOver, elem))
    println("Max of elements in array " + array.toString() + " is " + max)
    
    val sum2 = (0 /: array) {(sum,elem)=>sum+elem}
    val max2 = (Integer.MIN_VALUE /: array){(max,elem) => Math.max(max, elem)}
    
    println(sum2 + " " + max2)
  }
}

